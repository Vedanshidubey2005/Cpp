#include <bits/stdc++.h>
int lowerBound(vector<int> &nums,int n, int x){
        int low=  0 , high = n-1;
        int ans = n;
        while(low<=high){
            int mid = (low+high)/2;
            //maybe an answer
            if(nums[mid]>=x) {
                ans= mid;
                //look for more small index on left
                high = mid-1;
            }
            else{
                low = mid+1;  //look for right
            }
        }
return ans;
    }
    
     int upperBound(vector<int> &nums,int n, int x){
        
        int low=  0 , high = n-1;
        int ans = n;
        while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid]>x) {
                ans= mid;
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
return ans;
    
    }
pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
{
    int lb = lowerBound(arr,n,k);
         if(lb== arr.size() || arr[lb] != k) return {-1,-1};
            return {lb,upperBound(arr,n,k)-1 };
}





//LEETCODE 
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        int l = 0;
        int h = n-1;
        int first =-1;
        int last =-1;
        while(l<=h){
            int mid = (l+h)/2;
            if(nums[mid]== target){
                first = mid;
                h=mid-1;
            }
            else if(nums[mid]<target) l=mid+1;
            else h= mid-1;
        }
        int low = 0;
        int hi = n-1;
        while(low<=hi){
            int mid = (low+hi)/2;
            if(nums[mid]== target){
            last= mid;
                low=mid+1;
            }
            else if(nums[mid]<target) low=mid+1;
            else hi= mid-1;
        }
        if(first==-1) return {-1,-1};
        return {first,last};
        // vector<int>ans;
        // while(l<=h){
        //     int mid = (l+h)/2;
           
        //         if(nums[mid]==target){
        //             if(nums[mid-1]== target) ans.push_back(mid-1);
        //             else if(nums[mid+1]==target)  ans.push_back(mid+1);
        //             else ans.push_back(mid);
        //         }

        //         if(nums[mid]<target){
        //             l=mid+1;
        //         }
        //         else{
        //             h=mid-1;
        //         }
            
        // }
        // if(ans.size()==0){
        //         return {-1,-1};
        //     }
        //     else{
        //         return ans;
        //     }
    }
};
