class Solution{
public:

int lowerBound(vector<int> &nums, int x){
        int n= nums.size();
        int low=  0 , high = n-1;
        int ans1 = n;
        while(low<=high){
            int mid = (low+high)/2;
            if(nums[mid]>=x) {
                ans1= mid;
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
return ans1;
    }
    
     int upperBound(vector<int> &nums1, int m){
        
        int n= nums1.size();
        int low=  0 , high = n-1;
        int ans2 = m;
        while(low<=high){
            int mid = (low+high)/2;
            if(nums1[mid]>m) {
                ans2= mid;
                high = mid-1;
            }
            else{
                low = mid+1;
            }
        }
return ans2;
    }
    vector<int> searchRange(vector<int> &nums, int target) {
         int lb = lowerBound(nums, target);
         if(lb== nums.size() || nums[lb] != target) return {-1,-1};
            return {lb,upperBound(nums, target)-1 };
         
    }
};
