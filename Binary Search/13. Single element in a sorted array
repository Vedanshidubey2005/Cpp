int singleNonDuplicate(vector<int>& arr)
{
	int n  = arr.size();
	if(n==1) return arr[0];  //if there is only one element

	if(arr[0]!=arr[1]) return arr[0];  //if first element is single one
    if(arr[n-1]!=arr[n-2]) return arr[n-1];  //if last element is single one

	int low= 1 , high = n-2; //trim h and l as we have checkd for 1st and last one
	while(low<=high){
		int mid = (low+high)/2;

		//if middle element is single one
		if(arr[mid]!=arr[mid+1]&& arr[mid]!=arr[mid-1])  return arr[mid];

		// if we are(mid) in the left part , index pair are even,odd , so check for this and eliminate the left part
		if((mid % 2 ==1 && arr[mid]== arr[mid-1]) || (mid % 2==0 && arr[mid]==arr[mid+1])){
			low=mid+1;
		}

		//else we are in the right part , means index pair is odd,even , so eliminate right part
		else{
			high=mid-1;
		}
	}

	return -1;
}
